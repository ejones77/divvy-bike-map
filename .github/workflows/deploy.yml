name: Deploy

on:
  push:
    branches: [main]

env:
  REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Setup ECR repository
      run: aws ecr describe-repositories --repository-names $REPOSITORY || aws ecr create-repository --repository-name $REPOSITORY
    
    - name: Build and push images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker compose build api ml
        
        push_image() {
          local service=$1
          local image_name="divvy-bike-map-${service}"
          
          docker tag ${image_name}:latest $ECR_REGISTRY/$REPOSITORY:${service}-latest
          docker tag ${image_name}:latest $ECR_REGISTRY/$REPOSITORY:${service}-$IMAGE_TAG
          
          docker push $ECR_REGISTRY/$REPOSITORY:${service}-latest
          docker push $ECR_REGISTRY/$REPOSITORY:${service}-$IMAGE_TAG
        }
        
        push_image api
        push_image ml
    - name: Deploy to EC2 via SSM
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cat > deploy_script.sh << 'SCRIPT_EOF'
        #!/bin/bash
        set -e
        
        ECR_REGISTRY="$1"
        IMAGE_TAG="$2"
        
        command -v docker >/dev/null || {
          sudo apt-get update -qq
          sudo apt-get install -y docker.io docker-compose-plugin git awscli
          sudo systemctl enable --now docker
          sudo usermod -aG docker $USER
        }
        
        APP_DIR="/opt/divvy-bike-availability"
        sudo mkdir -p $APP_DIR && sudo chown $USER:$USER $APP_DIR && cd $APP_DIR
        
        [ -d .git ] && git fetch origin && git reset --hard origin/main || git clone https://github.com/${{ github.repository }} .
        
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
        
        cat > .env << EOF
        DB_URL=${{ secrets.PRODUCTION_DB_URL }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        MODEL_S3_BUCKET=${{ secrets.MODEL_S3_BUCKET }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        ML_REQUEST_TIMEOUT_MIN=5
        ML_PORT=5000
        DATA_COLLECTION_INTERVAL_MIN=15
        PREDICTION_INTERVAL_HOURS=2
        EOF
        
        sed -i "s|build: ./api|image: $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:api-$IMAGE_TAG|" docker-compose.yml
        sed -i "s|build: ./ml-pipeline|image: $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:ml-$IMAGE_TAG|" docker-compose.yml
        
        docker compose pull && docker compose up -d --remove-orphans
        
        (crontab -l 2>/dev/null | grep -v "@reboot.*divvy-bike"; echo "@reboot cd $APP_DIR && docker compose up -d") | crontab -
        
        echo "Deployment completed successfully"
        SCRIPT_EOF
        
        # Execute deployment via SSM
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=[\"$(base64 -w 0 deploy_script.sh | tr -d '\n')\"]" \
          --query 'Command.CommandId' \
          --output text)
        
        echo "Deployment command sent with ID: $COMMAND_ID"
        
        aws ssm wait command-executed \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }}
        
        aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'StandardOutputContent' \
          --output text
        
        ERROR_OUTPUT=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'StandardErrorContent' \
          --output text)
        
        if [ -n "$ERROR_OUTPUT" ] && [ "$ERROR_OUTPUT" != "None" ]; then
          echo "Deployment errors:"
          echo "$ERROR_OUTPUT"
          exit 1
        fi
        
        echo "Deployment completed successfully via SSM"